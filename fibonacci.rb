# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# pseudocode
# write a fibonacci sequence
      # make an array
      # some type of loop
      # add elements to the end of the array based on what is in the array
      # add the final two elements together, then << that number on to the end of the array
# keep track of all the numbers in an array
# filter out numbers greater than 4 million/stop once the numbers get above 4 million
# find the even numbers
# sum all the even numbers

def fibonacci

  # write a fibonacci sequence
  # make an array
  fibonacci_sequence = [1, 2, 3, 5, 8]
  while true
    the_length = fibonacci_sequence.count - 1
    if fibonacci_sequence[the_length] + fibonacci_sequence[the_length - 1] > 4000000
      break
    end
    fibonacci_sequence << (fibonacci_sequence[the_length] + fibonacci_sequence[the_length - 1])
  end
  # p fibonacci_sequence

  # find the even numbers in an array
  # find if a particular number is even
  # make a loop to check them all
  even_array = []
  fibonacci_sequence.each do |number|
    if number % 2 == 0
      even_array << number
    else
    end
  end

  p even_array

  sum = 0
  even_array.each do |number|
    sum += number
  end

  p sum
end

fibonacci()
